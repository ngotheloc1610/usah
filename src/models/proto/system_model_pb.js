// source: system_model.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Account', null, global);
goog.exportSymbol('proto.Account.TradingRights', null, global);
goog.exportSymbol('proto.AccountBalance', null, global);
goog.exportSymbol('proto.DealAction', null, global);
goog.exportSymbol('proto.LoginInfo', null, global);
goog.exportSymbol('proto.MsgCode', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LoginInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LoginInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.LoginInfo.displayName = 'proto.LoginInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Account = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Account.displayName = 'proto.Account';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AccountBalance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AccountBalance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AccountBalance.displayName = 'proto.AccountBalance';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LoginInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.LoginInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LoginInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoginInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    login: jspb.Message.getFieldWithDefault(msg, 1, ""),
    macAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    localIp: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LoginInfo}
 */
proto.LoginInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LoginInfo;
  return proto.LoginInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LoginInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LoginInfo}
 */
proto.LoginInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogin(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMacAddress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalIp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LoginInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LoginInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LoginInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoginInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMacAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLocalIp();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string login = 1;
 * @return {string}
 */
proto.LoginInfo.prototype.getLogin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.LoginInfo} returns this
 */
proto.LoginInfo.prototype.setLogin = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string mac_address = 3;
 * @return {string}
 */
proto.LoginInfo.prototype.getMacAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.LoginInfo} returns this
 */
proto.LoginInfo.prototype.setMacAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string local_ip = 4;
 * @return {string}
 */
proto.LoginInfo.prototype.getLocalIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.LoginInfo} returns this
 */
proto.LoginInfo.prototype.setLocalIp = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Account.prototype.toObject = function(opt_includeInstance) {
  return proto.Account.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Account} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Account.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    groupId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    enableFlg: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    tradingRights: jspb.Message.getFieldWithDefault(msg, 5, 0),
    apiFlg: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    registeredDate: jspb.Message.getFieldWithDefault(msg, 7, 0),
    comment: jspb.Message.getFieldWithDefault(msg, 8, ""),
    apiKey: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Account}
 */
proto.Account.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Account;
  return proto.Account.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Account}
 */
proto.Account.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGroupId(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableFlg(value);
      break;
    case 5:
      var value = /** @type {!proto.Account.TradingRights} */ (reader.readEnum());
      msg.setTradingRights(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApiFlg(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRegisteredDate(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Account.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Account.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Account} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Account.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getEnableFlg();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getTradingRights();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getApiFlg();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getRegisteredDate();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getApiKey();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Account.TradingRights = {
  TRADING_RIGHTS_NONE: 0,
  TRADING_OPEN_ONLY: 1,
  TRADING_CLOSE_ONLY: 2,
  TRADING_NORMAL: 3
};

/**
 * optional int64 account_id = 1;
 * @return {number}
 */
proto.Account.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Account} returns this
 */
proto.Account.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.Account.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Account} returns this
 */
proto.Account.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 group_id = 3;
 * @return {number}
 */
proto.Account.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Account} returns this
 */
proto.Account.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool enable_flg = 4;
 * @return {boolean}
 */
proto.Account.prototype.getEnableFlg = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Account} returns this
 */
proto.Account.prototype.setEnableFlg = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional TradingRights trading_rights = 5;
 * @return {!proto.Account.TradingRights}
 */
proto.Account.prototype.getTradingRights = function() {
  return /** @type {!proto.Account.TradingRights} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.Account.TradingRights} value
 * @return {!proto.Account} returns this
 */
proto.Account.prototype.setTradingRights = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional bool api_flg = 6;
 * @return {boolean}
 */
proto.Account.prototype.getApiFlg = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Account} returns this
 */
proto.Account.prototype.setApiFlg = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional int64 registered_date = 7;
 * @return {number}
 */
proto.Account.prototype.getRegisteredDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Account} returns this
 */
proto.Account.prototype.setRegisteredDate = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string comment = 8;
 * @return {string}
 */
proto.Account.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.Account} returns this
 */
proto.Account.prototype.setComment = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string api_key = 9;
 * @return {string}
 */
proto.Account.prototype.getApiKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.Account} returns this
 */
proto.Account.prototype.setApiKey = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AccountBalance.prototype.toObject = function(opt_includeInstance) {
  return proto.AccountBalance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AccountBalance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AccountBalance.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    balance: jspb.Message.getFieldWithDefault(msg, 2, ""),
    collateral: jspb.Message.getFieldWithDefault(msg, 3, ""),
    realizedPl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    marginRequired: jspb.Message.getFieldWithDefault(msg, 5, ""),
    marginMaintain: jspb.Message.getFieldWithDefault(msg, 6, ""),
    marginDeficit: jspb.Message.getFieldWithDefault(msg, 7, ""),
    unrealizedPl: jspb.Message.getFieldWithDefault(msg, 8, ""),
    buyingPower: jspb.Message.getFieldWithDefault(msg, 9, ""),
    equity: jspb.Message.getFieldWithDefault(msg, 10, ""),
    withdrawableAmount: jspb.Message.getFieldWithDefault(msg, 11, ""),
    currencyCode: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AccountBalance}
 */
proto.AccountBalance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AccountBalance;
  return proto.AccountBalance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AccountBalance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AccountBalance}
 */
proto.AccountBalance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBalance(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollateral(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRealizedPl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarginRequired(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarginMaintain(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarginDeficit(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnrealizedPl(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuyingPower(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setEquity(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setWithdrawableAmount(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrencyCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AccountBalance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AccountBalance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AccountBalance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AccountBalance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getBalance();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCollateral();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRealizedPl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMarginRequired();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMarginMaintain();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMarginDeficit();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUnrealizedPl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getBuyingPower();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getEquity();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getWithdrawableAmount();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getCurrencyCode();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional int64 account_id = 1;
 * @return {number}
 */
proto.AccountBalance.prototype.getAccountId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.AccountBalance} returns this
 */
proto.AccountBalance.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string balance = 2;
 * @return {string}
 */
proto.AccountBalance.prototype.getBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AccountBalance} returns this
 */
proto.AccountBalance.prototype.setBalance = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string collateral = 3;
 * @return {string}
 */
proto.AccountBalance.prototype.getCollateral = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.AccountBalance} returns this
 */
proto.AccountBalance.prototype.setCollateral = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string realized_pl = 4;
 * @return {string}
 */
proto.AccountBalance.prototype.getRealizedPl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.AccountBalance} returns this
 */
proto.AccountBalance.prototype.setRealizedPl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string margin_required = 5;
 * @return {string}
 */
proto.AccountBalance.prototype.getMarginRequired = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.AccountBalance} returns this
 */
proto.AccountBalance.prototype.setMarginRequired = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string margin_maintain = 6;
 * @return {string}
 */
proto.AccountBalance.prototype.getMarginMaintain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.AccountBalance} returns this
 */
proto.AccountBalance.prototype.setMarginMaintain = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string margin_deficit = 7;
 * @return {string}
 */
proto.AccountBalance.prototype.getMarginDeficit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.AccountBalance} returns this
 */
proto.AccountBalance.prototype.setMarginDeficit = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string unrealized_pl = 8;
 * @return {string}
 */
proto.AccountBalance.prototype.getUnrealizedPl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.AccountBalance} returns this
 */
proto.AccountBalance.prototype.setUnrealizedPl = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string buying_power = 9;
 * @return {string}
 */
proto.AccountBalance.prototype.getBuyingPower = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.AccountBalance} returns this
 */
proto.AccountBalance.prototype.setBuyingPower = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string equity = 10;
 * @return {string}
 */
proto.AccountBalance.prototype.getEquity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.AccountBalance} returns this
 */
proto.AccountBalance.prototype.setEquity = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string withdrawable_amount = 11;
 * @return {string}
 */
proto.AccountBalance.prototype.getWithdrawableAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.AccountBalance} returns this
 */
proto.AccountBalance.prototype.setWithdrawableAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string currency_code = 12;
 * @return {string}
 */
proto.AccountBalance.prototype.getCurrencyCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.AccountBalance} returns this
 */
proto.AccountBalance.prototype.setCurrencyCode = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * @enum {number}
 */
proto.DealAction = {
  DEAL_NONE: 0,
  DEAL_BALANCE: 2,
  DEAL_CREDIT: 3,
  DEAL_CHARGE: 4,
  DEAL_BUY: 5,
  DEAL_SELL: 6
};

/**
 * @enum {number}
 */
proto.MsgCode = {
  MT_RET_OK_NONE: 0,
  MT_RET_OK: 1,
  MT_RET_ERROR: 2,
  MT_RET_ERR_PARAMS: 3,
  MT_RET_ERR_PERMISSIONS: 8,
  MT_RET_ERR_TIMEOUT: 9,
  MT_RET_ERR_NOTFOUND: 13,
  MT_RET_SUBCRIBE_OK: 310,
  MT_RET_SUBCRIBE_ALREADY: 311,
  MT_RET_SUBCRIBE_ERROR: 312,
  MT_RET_UNSUBCRIBE_OK: 320,
  MT_RET_UNSUBCRIBE_ERROR: 322,
  MT_RET_AUTH_ACCOUNT_INVALID: 1001,
  MT_RET_AUTH_ACCOUNT_DISABLED: 1002
};

goog.object.extend(exports, proto);
