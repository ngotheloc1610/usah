// source: trading_model.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.CallPut', null, global);
goog.exportSymbol('proto.Contract', null, global);
goog.exportSymbol('proto.ExchangeCode', null, global);
goog.exportSymbol('proto.ExecutionMode', null, global);
goog.exportSymbol('proto.ModifyType', null, global);
goog.exportSymbol('proto.Order', null, global);
goog.exportSymbol('proto.OrderEntry', null, global);
goog.exportSymbol('proto.OrderFilling', null, global);
goog.exportSymbol('proto.OrderMode', null, global);
goog.exportSymbol('proto.OrderReason', null, global);
goog.exportSymbol('proto.OrderRoute', null, global);
goog.exportSymbol('proto.OrderState', null, global);
goog.exportSymbol('proto.OrderTime', null, global);
goog.exportSymbol('proto.OrderType', null, global);
goog.exportSymbol('proto.Position', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Order = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Order.displayName = 'proto.Order';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Contract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Contract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Contract.displayName = 'proto.Contract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Position = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Position, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Position.displayName = 'proto.Position';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Order.prototype.toObject = function(opt_includeInstance) {
  return proto.Order.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Order} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Order.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbolCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    orderType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    state: jspb.Message.getFieldWithDefault(msg, 4, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 5, ""),
    price: jspb.Message.getFieldWithDefault(msg, 6, ""),
    slippage: jspb.Message.getFieldWithDefault(msg, 7, ""),
    orderFilling: jspb.Message.getFieldWithDefault(msg, 8, 0),
    executeMode: jspb.Message.getFieldWithDefault(msg, 9, 0),
    reason: jspb.Message.getFieldWithDefault(msg, 10, 0),
    orderTime: jspb.Message.getFieldWithDefault(msg, 11, 0),
    expireTime: jspb.Message.getFieldWithDefault(msg, 12, 0),
    tp: jspb.Message.getFieldWithDefault(msg, 13, ""),
    sl: jspb.Message.getFieldWithDefault(msg, 14, ""),
    pl: jspb.Message.getFieldWithDefault(msg, 15, ""),
    swap: jspb.Message.getFieldWithDefault(msg, 16, ""),
    fee: jspb.Message.getFieldWithDefault(msg, 17, ""),
    time: jspb.Message.getFieldWithDefault(msg, 18, 0),
    note: jspb.Message.getFieldWithDefault(msg, 19, ""),
    entry: jspb.Message.getFieldWithDefault(msg, 20, 0),
    route: jspb.Message.getFieldWithDefault(msg, 21, 0),
    orderMode: jspb.Message.getFieldWithDefault(msg, 22, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 23, 0),
    triggerPrice: jspb.Message.getFieldWithDefault(msg, 24, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Order}
 */
proto.Order.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Order;
  return proto.Order.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Order}
 */
proto.Order.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbolCode(value);
      break;
    case 3:
      var value = /** @type {!proto.OrderType} */ (reader.readEnum());
      msg.setOrderType(value);
      break;
    case 4:
      var value = /** @type {!proto.OrderState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlippage(value);
      break;
    case 8:
      var value = /** @type {!proto.OrderFilling} */ (reader.readEnum());
      msg.setOrderFilling(value);
      break;
    case 9:
      var value = /** @type {!proto.ExecutionMode} */ (reader.readEnum());
      msg.setExecuteMode(value);
      break;
    case 10:
      var value = /** @type {!proto.OrderReason} */ (reader.readEnum());
      msg.setReason(value);
      break;
    case 11:
      var value = /** @type {!proto.OrderTime} */ (reader.readEnum());
      msg.setOrderTime(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpireTime(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setTp(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setSl(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setPl(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setSwap(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setFee(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 20:
      var value = /** @type {!proto.OrderEntry} */ (reader.readEnum());
      msg.setEntry(value);
      break;
    case 21:
      var value = /** @type {!proto.OrderRoute} */ (reader.readEnum());
      msg.setRoute(value);
      break;
    case 22:
      var value = /** @type {!proto.OrderMode} */ (reader.readEnum());
      msg.setOrderMode(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUid(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setTriggerPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Order.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Order.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Order} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Order.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbolCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOrderType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSlippage();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getOrderFilling();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getExecuteMode();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getReason();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getOrderTime();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getExpireTime();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getTp();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getSl();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getPl();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getSwap();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getFee();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      18,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getEntry();
  if (f !== 0.0) {
    writer.writeEnum(
      20,
      f
    );
  }
  f = message.getRoute();
  if (f !== 0.0) {
    writer.writeEnum(
      21,
      f
    );
  }
  f = message.getOrderMode();
  if (f !== 0.0) {
    writer.writeEnum(
      22,
      f
    );
  }
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt64(
      23,
      f
    );
  }
  f = message.getTriggerPrice();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
};


/**
 * optional string order_id = 1;
 * @return {string}
 */
proto.Order.prototype.getOrderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setOrderId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string symbol_code = 2;
 * @return {string}
 */
proto.Order.prototype.getSymbolCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setSymbolCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional OrderType order_type = 3;
 * @return {!proto.OrderType}
 */
proto.Order.prototype.getOrderType = function() {
  return /** @type {!proto.OrderType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.OrderType} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setOrderType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional OrderState state = 4;
 * @return {!proto.OrderState}
 */
proto.Order.prototype.getState = function() {
  return /** @type {!proto.OrderState} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.OrderState} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string amount = 5;
 * @return {string}
 */
proto.Order.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string price = 6;
 * @return {string}
 */
proto.Order.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string slippage = 7;
 * @return {string}
 */
proto.Order.prototype.getSlippage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setSlippage = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional OrderFilling order_filling = 8;
 * @return {!proto.OrderFilling}
 */
proto.Order.prototype.getOrderFilling = function() {
  return /** @type {!proto.OrderFilling} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.OrderFilling} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setOrderFilling = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional ExecutionMode execute_mode = 9;
 * @return {!proto.ExecutionMode}
 */
proto.Order.prototype.getExecuteMode = function() {
  return /** @type {!proto.ExecutionMode} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.ExecutionMode} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setExecuteMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional OrderReason reason = 10;
 * @return {!proto.OrderReason}
 */
proto.Order.prototype.getReason = function() {
  return /** @type {!proto.OrderReason} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.OrderReason} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setReason = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional OrderTime order_time = 11;
 * @return {!proto.OrderTime}
 */
proto.Order.prototype.getOrderTime = function() {
  return /** @type {!proto.OrderTime} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.OrderTime} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setOrderTime = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional int64 expire_time = 12;
 * @return {number}
 */
proto.Order.prototype.getExpireTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setExpireTime = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string tp = 13;
 * @return {string}
 */
proto.Order.prototype.getTp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setTp = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string sl = 14;
 * @return {string}
 */
proto.Order.prototype.getSl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setSl = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string pl = 15;
 * @return {string}
 */
proto.Order.prototype.getPl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setPl = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string swap = 16;
 * @return {string}
 */
proto.Order.prototype.getSwap = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setSwap = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string fee = 17;
 * @return {string}
 */
proto.Order.prototype.getFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setFee = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional int64 time = 18;
 * @return {number}
 */
proto.Order.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional string note = 19;
 * @return {string}
 */
proto.Order.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setNote = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional OrderEntry entry = 20;
 * @return {!proto.OrderEntry}
 */
proto.Order.prototype.getEntry = function() {
  return /** @type {!proto.OrderEntry} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {!proto.OrderEntry} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setEntry = function(value) {
  return jspb.Message.setProto3EnumField(this, 20, value);
};


/**
 * optional OrderRoute route = 21;
 * @return {!proto.OrderRoute}
 */
proto.Order.prototype.getRoute = function() {
  return /** @type {!proto.OrderRoute} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {!proto.OrderRoute} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setRoute = function(value) {
  return jspb.Message.setProto3EnumField(this, 21, value);
};


/**
 * optional OrderMode order_mode = 22;
 * @return {!proto.OrderMode}
 */
proto.Order.prototype.getOrderMode = function() {
  return /** @type {!proto.OrderMode} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {!proto.OrderMode} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setOrderMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 22, value);
};


/**
 * optional int64 uid = 23;
 * @return {number}
 */
proto.Order.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setUid = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional string trigger_price = 24;
 * @return {string}
 */
proto.Order.prototype.getTriggerPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * @param {string} value
 * @return {!proto.Order} returns this
 */
proto.Order.prototype.setTriggerPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 24, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Contract.prototype.toObject = function(opt_includeInstance) {
  return proto.Contract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Contract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Contract.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbolCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    exchangeCode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    orderType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    state: jspb.Message.getFieldWithDefault(msg, 5, 0),
    qty: jspb.Message.getFieldWithDefault(msg, 6, ""),
    settleQty: jspb.Message.getFieldWithDefault(msg, 7, ""),
    orderMode: jspb.Message.getFieldWithDefault(msg, 8, 0),
    cp: jspb.Message.getFieldWithDefault(msg, 9, 0),
    strikePrice: jspb.Message.getFieldWithDefault(msg, 10, ""),
    limitPrice: jspb.Message.getFieldWithDefault(msg, 11, ""),
    settlePrice: jspb.Message.getFieldWithDefault(msg, 12, ""),
    positionPrice: jspb.Message.getFieldWithDefault(msg, 13, ""),
    expireTime: jspb.Message.getFieldWithDefault(msg, 14, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Contract}
 */
proto.Contract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Contract;
  return proto.Contract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Contract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Contract}
 */
proto.Contract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbolCode(value);
      break;
    case 3:
      var value = /** @type {!proto.ExchangeCode} */ (reader.readEnum());
      msg.setExchangeCode(value);
      break;
    case 4:
      var value = /** @type {!proto.OrderType} */ (reader.readEnum());
      msg.setOrderType(value);
      break;
    case 5:
      var value = /** @type {!proto.OrderState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setQty(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSettleQty(value);
      break;
    case 8:
      var value = /** @type {!proto.OrderMode} */ (reader.readEnum());
      msg.setOrderMode(value);
      break;
    case 9:
      var value = /** @type {!proto.CallPut} */ (reader.readEnum());
      msg.setCp(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrikePrice(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setLimitPrice(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSettlePrice(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPositionPrice(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpireTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Contract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Contract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Contract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Contract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbolCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExchangeCode();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getOrderType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getQty();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSettleQty();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getOrderMode();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getCp();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getStrikePrice();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getLimitPrice();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getSettlePrice();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getPositionPrice();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getExpireTime();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
};


/**
 * optional string order_id = 1;
 * @return {string}
 */
proto.Contract.prototype.getOrderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Contract} returns this
 */
proto.Contract.prototype.setOrderId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string symbol_code = 2;
 * @return {string}
 */
proto.Contract.prototype.getSymbolCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Contract} returns this
 */
proto.Contract.prototype.setSymbolCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ExchangeCode exchange_code = 3;
 * @return {!proto.ExchangeCode}
 */
proto.Contract.prototype.getExchangeCode = function() {
  return /** @type {!proto.ExchangeCode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ExchangeCode} value
 * @return {!proto.Contract} returns this
 */
proto.Contract.prototype.setExchangeCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional OrderType order_type = 4;
 * @return {!proto.OrderType}
 */
proto.Contract.prototype.getOrderType = function() {
  return /** @type {!proto.OrderType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.OrderType} value
 * @return {!proto.Contract} returns this
 */
proto.Contract.prototype.setOrderType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional OrderState state = 5;
 * @return {!proto.OrderState}
 */
proto.Contract.prototype.getState = function() {
  return /** @type {!proto.OrderState} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.OrderState} value
 * @return {!proto.Contract} returns this
 */
proto.Contract.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string qty = 6;
 * @return {string}
 */
proto.Contract.prototype.getQty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Contract} returns this
 */
proto.Contract.prototype.setQty = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string settle_qty = 7;
 * @return {string}
 */
proto.Contract.prototype.getSettleQty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.Contract} returns this
 */
proto.Contract.prototype.setSettleQty = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional OrderMode order_mode = 8;
 * @return {!proto.OrderMode}
 */
proto.Contract.prototype.getOrderMode = function() {
  return /** @type {!proto.OrderMode} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.OrderMode} value
 * @return {!proto.Contract} returns this
 */
proto.Contract.prototype.setOrderMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional CallPut cp = 9;
 * @return {!proto.CallPut}
 */
proto.Contract.prototype.getCp = function() {
  return /** @type {!proto.CallPut} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.CallPut} value
 * @return {!proto.Contract} returns this
 */
proto.Contract.prototype.setCp = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional string strike_price = 10;
 * @return {string}
 */
proto.Contract.prototype.getStrikePrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.Contract} returns this
 */
proto.Contract.prototype.setStrikePrice = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string limit_price = 11;
 * @return {string}
 */
proto.Contract.prototype.getLimitPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.Contract} returns this
 */
proto.Contract.prototype.setLimitPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string settle_price = 12;
 * @return {string}
 */
proto.Contract.prototype.getSettlePrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.Contract} returns this
 */
proto.Contract.prototype.setSettlePrice = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string position_price = 13;
 * @return {string}
 */
proto.Contract.prototype.getPositionPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.Contract} returns this
 */
proto.Contract.prototype.setPositionPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional int64 expire_time = 14;
 * @return {number}
 */
proto.Contract.prototype.getExpireTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.Contract} returns this
 */
proto.Contract.prototype.setExpireTime = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Position.prototype.toObject = function(opt_includeInstance) {
  return proto.Position.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Position} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Position.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
    vwapPrice: jspb.Message.getFieldWithDefault(msg, 3, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 4, ""),
    marginRequire: jspb.Message.getFieldWithDefault(msg, 5, ""),
    swapPl: jspb.Message.getFieldWithDefault(msg, 6, ""),
    mamCode: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Position}
 */
proto.Position.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Position;
  return proto.Position.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Position} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Position}
 */
proto.Position.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVwapPrice(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarginRequire(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSwapPl(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMamCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Position.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Position.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Position} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Position.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVwapPrice();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMarginRequire();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSwapPl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMamCode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Position.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Position} returns this
 */
proto.Position.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.Position.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Position} returns this
 */
proto.Position.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string vwap_price = 3;
 * @return {string}
 */
proto.Position.prototype.getVwapPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Position} returns this
 */
proto.Position.prototype.setVwapPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string amount = 4;
 * @return {string}
 */
proto.Position.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Position} returns this
 */
proto.Position.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string margin_require = 5;
 * @return {string}
 */
proto.Position.prototype.getMarginRequire = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Position} returns this
 */
proto.Position.prototype.setMarginRequire = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string swap_pl = 6;
 * @return {string}
 */
proto.Position.prototype.getSwapPl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Position} returns this
 */
proto.Position.prototype.setSwapPl = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string mam_code = 7;
 * @return {string}
 */
proto.Position.prototype.getMamCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.Position} returns this
 */
proto.Position.prototype.setMamCode = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * @enum {number}
 */
proto.ExchangeCode = {
  EXCHANGE_CODE_NONE: 0,
  EXCHANGE_TSE: 1,
  EXCHANGE_NSE: 3,
  EXCHANGE_FSE: 6,
  EXCHANGE_SSE: 8,
  EXCHANGE_OSE: 10,
  EXCHANGE_TOCOM: 11
};

/**
 * @enum {number}
 */
proto.OrderType = {
  ORDER_TYPE_NONE: 0,
  OP_BUY_LIMIT: 2,
  OP_SELL_LIMIT: 3,
  OP_BUY_STOP: 4,
  OP_SELL_STOP: 5,
  OP_BUY_STOP_LIMIT: 6,
  OP_SELL_STOP_LIMIT: 7,
  OP_SELL_MTL: 8,
  OP_BUY_MTL: 9,
  OP_SELL_STM: 10,
  OP_BUY_STM: 11,
  OP_BUY: 100,
  OP_SELL: 101
};

/**
 * @enum {number}
 */
proto.ExecutionMode = {
  EXECUTION_MODE_NONE: 0,
  MARKET: 1,
  INSTANT: 2
};

/**
 * @enum {number}
 */
proto.OrderMode = {
  ORDER_MODE_NONE: 0,
  OCO: 10,
  IFD: 20,
  IFO: 30,
  REGULAR: 40
};

/**
 * @enum {number}
 */
proto.OrderFilling = {
  ORDER_FILL_NONE: 0,
  ORDER_FILL_FAK: 5,
  ORDER_FILL_FAS: 6,
  ORDER_FILL_FOK: 7
};

/**
 * @enum {number}
 */
proto.OrderTime = {
  ORDER_TIME_NONE: 0,
  ORDER_TIME_DAY: 1,
  ORDER_TIME_SPECIFIED: 2,
  ORDER_TIME_SPECIFIED_DAY: 3,
  ORDER_TIME_GTC: 11
};

/**
 * @enum {number}
 */
proto.OrderState = {
  ORDER_STATE_NONE: 0,
  ORDER_STATE_PLACED: 1,
  ORDER_STATE_CANCELED: 2,
  ORDER_STATE_PARTIAL: 3,
  ORDER_STATE_FILLED: 4,
  ORDER_STATE_REJECTED: 5,
  ORDER_STATE_EXPIRED: 6,
  ORDER_STATE_MATCHED: 10,
  ORDER_STATE_STARTED: 11
};

/**
 * @enum {number}
 */
proto.OrderEntry = {
  ENTRY_NONE: 0,
  ENTRY_OUT: 1,
  ENTRY_IN: 2
};

/**
 * @enum {number}
 */
proto.OrderReason = {
  REASON_NONE: 0,
  REASON_API: 1,
  REASON_DEALER: 2,
  REASON_SL: 3,
  REASON_TP: 4,
  REASON_SO: 5,
  REASON_ROLLOVER: 6,
  REASON_CLIENT: 10
};

/**
 * @enum {number}
 */
proto.OrderRoute = {
  ROUTE_NONE: 0,
  ROUTE_IOS: 1,
  ROUTE_ANDROID: 2,
  ROUTE_BACK: 3,
  ROUTE_API: 4,
  ROUTE_WEB: 5
};

/**
 * @enum {number}
 */
proto.CallPut = {
  CALL_PUT_NONE: 0,
  PUT: 1,
  CALL: 2
};

/**
 * @enum {number}
 */
proto.ModifyType = {
  MODIFY_TYPE_NONE: 0,
  CANCEL: 2,
  UPDATE: 3
};

goog.object.extend(exports, proto);
